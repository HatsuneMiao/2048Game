#include <iostream>
#include <cstdlib>//产生随机数用    rand()
#include <ctime>//产生随机数用  ，可以产生一个种子。
#include <conio.h>//getch使用的库
#include <cmath>
#include <iomanip>//setw()函数使用的库
//#include <windows.h>//

#include "moeneko.h"//函数声明

using namespace std;



/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏结束主函数   bool gameover(int a[][4])
.					作用：判断游戏是否可以继续运行。
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0 = fause（游戏可以继续）     或      1 = ture（游戏失败）。

*//////////////////////////////////////////////////////////////////////////////
bool gameover(int a[][4]) {
	int NS, EW;
	NS = gameoverup(a);
	EW = gameoverleft(a);
	if (NS == 1 && EW == 1) {
		return 1;
	}
	else {
		return 0;
	}
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏失败判断器（横向）   bool gameoverleft(int(*a)[4])
.					作用：从横向的角度判断游戏是否结束
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0 = fause（游戏可以继续）     或      1 = ture（游戏失败）。

*//////////////////////////////////////////////////////////////////////////////
bool gameoverleft(int a[][4]) {
	int x, y;
	if (vacancy(a)) {//如果没有空位，则进行下一步的判断
		for (y = 0; y < 4; y++) {
			for (x = 0; x < 3; x++) {
				if (a[y][x] == a[y][x + 1]) {
					return 0;//游戏还可以进行下去
				}
			}
		}
	}
	else {
		return 0;
	}
	return 1;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏失败判断器（纵向）   bool gameoverup(int(*a)[4])
.					作用：从纵向的角度判断游戏是否结束
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0（游戏可以继续）     或      1（游戏失败）。

*//////////////////////////////////////////////////////////////////////////////
bool gameoverup(int a[][4]) {
	int x, y;
	if (vacancy(a)) {//如果没有空位，则进行下一步的判断
		for (x = 0; x < 4; x++) {
			for (y = 0; y < 3; y++) {
				if (a[y][x] == a[y + 1][x]) {
					return 0;//游戏还可以进行下去
				}
			}
		}
	}
	else {
		return 0;
	}
	return 1;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏空位检查器   bool vacancy(int a[][4])
.					作用：判断游戏中是否有空位。
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0 = fause（有空位）     或      1 = ture（没有空位）。

*//////////////////////////////////////////////////////////////////////////////
bool vacancy(int a[][4]) {
	int x, y;
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			if (a[y][x] == 0) {//判断还有没有空位了
				return 0;//如果还有空位，则游戏可以继续运行
			}
		}
	}
	return 1;
}