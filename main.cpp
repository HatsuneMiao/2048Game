#include <iostream>
#include <cstdlib>//产生随机数用    rand()
#include <ctime>//产生随机数用  ，可以产生一个种子。
#include <conio.h>//getch使用的库
#include <cmath>
#include <iomanip>//setw()函数使用的库
//#include <windows.h>//

#include "moeneko.h"//函数声明

using namespace std;

/*/////////////////////////////////////////////////////////////////////////////
		
.			函数	名称：主函数main()
.					作用：程序入口。
.					输入值：五
.					类型：int
.					返回值：正确运行为“0”。

*//////////////////////////////////////////////////////////////////////////////
int main(){
	srand(time(0));//为后续的随机函数   设定随机数种子
	int a[4][4] = { 0 }, first;
	char wasd;
	first = 0;

	//初始化游戏数据   开始
	if (first == 0) {
		putin(a, suiji(2, 3));
		first++;
	}
	//初始化游戏数据   结束

	while (1){
		if (gameoverleft(a)||gameoverup(a)) {//前者判断横向，后者判断纵向。
			displayout(a, 0);
			cout << endl;
			cout << "游戏结束，请按任意键退出" << endl;
			_getch();
			break;
		}
		else {
			displayout(a, 0);
		}
		cout << endl << "请输入wasd代表方向" << endl;
		wasd = 'o';
		wasd = _getch();
		switch (wasd) {
		case ('w'):up(a); putin(a, 1); break;
		case ('a'):left(a); putin(a, 1); break;
		case ('s'):down(a);putin(a, 1); break;
		case ('d'):right(a);putin(a, 1); break;
		default:
			cout << "输入错误，请输入“w”“a”“s”“d”" << endl;
			_getch();
			break;
		}
		//system("pause");
	}
	return 0;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：随机数产生器 suiji()
.					作用：随机数产生器。
.					输入值：给定一个上限值，或者给定上限下限值。
.					类型：int
.					返回值：给定范围的随机数。

*//////////////////////////////////////////////////////////////////////////////
int suiji(int b) {
	b++;
	int temp;
	temp = rand();
	return temp % b;
}

int suiji(int a, int b) {
	int temp;
	b++;
	while (1) {
		temp = rand();
		if (temp % b >= a) {
			break;
		}
	}
	return temp % b;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：显示器 displayout()
.					作用：分行显示二维数组的内容。
.					输入值：1.需要输出的数组。		2.是否清空屏幕（0为清空）
.					类型：void
.					返回值：无。

*//////////////////////////////////////////////////////////////////////////////
void displayout(int a[][4], int clean) {
	if (clean == 0) {
		system("CLS");
	}
	else if (clean == 1) {}
	else {
		cout << "clean参数错误" << endl;
		goto close;
	}
	int i, j;
	cout << endl;
	for (i = 0; i <= 3; i++) {
		for (j = 0; j <= 3; j++) {
			cout << setw(5) << a[i][j] << "   ";
		}
		cout << endl;
	}
close:;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：二或四随机生成器 torf()	实际上是twoorfour的缩写
.					作用：随机生成  2  或者  4  。
.					输入值：无
.					类型：int
.					返回值：2或者4。

*//////////////////////////////////////////////////////////////////////////////
int torf() {
	if (suiji(1) == 1) {
		return 2;
	}
	else {
		return 4;
	}
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：方格随机选择器   putin(int(*a)[4],int quantity)
.					作用：随机指定4*4区域内的一个方格，并且判断方格是否为空，如果为空，则输入2或者4
.					输入值：1.指定的4*4的方格		2.要指定输入的方格的数量
.					类型：void
.					返回值：无。

*//////////////////////////////////////////////////////////////////////////////
void putin(int(*a)[4],int quantity) {
	int x, y, j;
	for (j = 1; j <= quantity; j++) {
		while (1) {
			x = suiji(4);
			y = suiji(4);
			if (a[y][x] == 0) {
				a[y][x] = torf();
				break;
			}
		}
	}
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏失败判断器（横向）   bool gameoverleft(int(*a)[4]) 
.					作用：从横向的角度判断游戏是否结束
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0（游戏可以继续）     或      1（游戏失败）。

*//////////////////////////////////////////////////////////////////////////////
bool gameoverleft(int(*a)[4]) {
	int x = 0, y = 0, m = 1;//假设游戏结束，假设游戏没有空位了。
	int x1 = 0, y1 = 0;
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			if (a[y][x] == 0) {//判断还有没有空位了
				m--;
				return 0;//如果还有空位，则游戏可以继续运行
			}
		}
	}
	if (m == 1) {//如果没有空位，则进行下一步的判断
		for (y1 = 0; y1 < 4; y1++) {
			for (x1 = 0; x1 < 4; x1++) {
				if (a[y1][x1] == a[y1][x1 + 1]) {
					return 0;//游戏还可以进行下去
				}
			}
		}
	}
	return 1;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏失败判断器（纵向）   bool gameoverup(int(*a)[4])
.					作用：从纵向的角度判断游戏是否结束
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0（游戏可以继续）     或      1（游戏失败）。

*//////////////////////////////////////////////////////////////////////////////
bool gameoverup(int(*a)[4]) {
	xtoy(a);
	int x = 0, y = 0, m = 1;//假设游戏结束，假设游戏没有空位了。
	int x1 = 0, y1 = 0;
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			if (a[y][x] == 0) {//判断还有没有空位了
				m--;
				xtoy(a);
				return 0;//如果还有空位，则游戏可以继续运行
			}
		}
	}
	if (m == 1) {//如果没有空位，则进行下一步的判断
		for (y1 = 0; y1 < 4; y1++) {
			for (x1 = 0; x1 < 4; x1++) {
				if (a[y1][x1] == a[y1][x1 + 1]) {
					xtoy(a);
					return 0;//游戏还可以进行下去
				}
			}
		}
	}
	xtoy(a);
	return 1;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏步骤（左）   void left(int (*a)[4])
.					作用：计算向左运行的结果，并重新排序
.					输入值：1.需要计算的4*4的数组
.					类型：void
.					返回值：无。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
void left(int (*a)[4]) {
	int x = 0, y = 0;
	int m = 0, n = 0;
	int i = 0, j = 0, k = 0;
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			if (a[y][x] != 0) {
				for (i = 1; i <= 3 - x; i++) {
					if (a[y][x] == a[y][x + i] ) {
						if (i == 1) {
							a[y][x] = a[y][x] * 2;
							a[y][x + i] = 0;
							i = 999;//防止多次运算，
							x = x + 1;//防止多次运算，
						}
						else if (i == 2) {
							if (a[y][x + 1] == 0) {
								a[y][x] = a[y][x] * 2;
								a[y][x + i] = 0;
								i = 999;//防止多次运算，
								x = x + 1;//防止多次运算，
							}
						}
						else {
							if (a[y][x + 1] == 0 && a[y][x + 2] == 0) {
								a[y][x] = a[y][x] * 2;
								a[y][x + i] = 0;
								i = 999;//防止多次运算，
								x = x + 1;//防止多次运算，
							}
						}
					}
				}
			}
		}
	}
	for (k = 0; k < 3; k++) {
		for (y = 0; y <= 3; y++) {
			for (x = 0; x <= 3; x++) {
				if (a[y][x] == 0 && a[y][x + 1] != 0 && x + 1 <= 3) {
					a[y][x] = a[y][x + 1];
					a[y][x + 1] = 0;
				}
			}
		}
	}
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：纵横变换   void xtoy(int (*a)[4])
.					作用：将数组由纵向变为横向，颠倒位置
.					输入值：1.需要计算的4*4的数组
.					类型：void
.					返回值：无。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
void xtoy(int(*a)[4]) {
	int x = 0, y = 0;
	int temp[4][4];
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			temp[x][y] = a[y][x];
		}
	}
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			a[y][x] = temp[y][x];
		}
	}
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：横向变换   void xtox(int (*a)[4])
.					作用：将数组横向颠倒位置
.					输入值：1.需要计算的4*4的数组
.					类型：void
.					返回值：无。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
void xtox(int(*a)[4]) {
	int x = 0, y = 0;
	int temp[4][4];
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			temp[y][3 - x] = a[y][x];
		}
	}
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			a[y][x] = temp[y][x];
		}
	}
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：纵向变换   void ytoy(int (*a)[4])
.					作用：将数组纵向颠倒位置
.					输入值：1.需要计算的4*4的数组
.					类型：void
.					返回值：无。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
void ytoy(int(*a)[4]) {
	int x = 0, y = 0;
	int temp[4][4];
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			temp[3 - y][x] = a[y][x];
		}
	}
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			a[y][x] = temp[y][x];
		}
	}
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏步骤（上）   void up(int (*a)[4])
.					作用：计算向上运行的结果，并重新排序
.					输入值：1.需要计算的4*4的数组
.					类型：void
.					返回值：无。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
void up(int(*a)[4]) {
	xtoy(a);
	int x = 0, y = 0;
	int m = 0, n = 0;
	int i = 0, j = 0, k = 0;
	//out(a, 1);
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			if (a[y][x] != 0) {
				for (i = 1; i <= 3 - x; i++) {
					if (a[y][x] == a[y][x + i]) {
						if (i == 1) {
							a[y][x] = a[y][x] * 2;
							a[y][x + i] = 0;
							i = 999;//防止多次运算，
							x = x + 1;//防止多次运算，
						}
						else if (i == 2) {
							if (a[y][x + 1] == 0) {
								a[y][x] = a[y][x] * 2;
								a[y][x + i] = 0;
								i = 999;//防止多次运算，
								x = x + 1;//防止多次运算，
							}
						}
						else {
							if (a[y][x + 1] == 0 && a[y][x + 2] == 0) {
								a[y][x] = a[y][x] * 2;
								a[y][x + i] = 0;
								i = 999;//防止多次运算，
								x = x + 1;//防止多次运算，
							}
						}
					}
				}
			}
		}
	}
	for (k = 0; k < 3; k++) {
		for (y = 0; y <= 3; y++) {
			for (x = 0; x <= 3; x++) {
				if (a[y][x] == 0 && a[y][x + 1] != 0 && x + 1 <= 3) {
					a[y][x] = a[y][x + 1];
					a[y][x + 1] = 0;
				}
			}
		}
	}
	xtoy(a);
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏步骤（右）   void rigut(int (*a)[4])
.					作用：计算向右运行的结果，并重新排序
.					输入值：1.需要计算的4*4的数组
.					类型：void
.					返回值：无。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
void right(int(*a)[4]) {
	xtox(a);
	int x = 0, y = 0;
	int m = 0, n = 0;
	int i = 0, j = 0, k = 0;
	//out(a, 1);
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			if (a[y][x] != 0) {
				for (i = 1; i <= 3 - x; i++) {
					if (a[y][x] == a[y][x + i]) {
						if (i == 1) {
							a[y][x] = a[y][x] * 2;
							a[y][x + i] = 0;
							i = 999;//防止多次运算，
							x = x + 1;//防止多次运算，
						}
						else if (i == 2) {
							if (a[y][x + 1] == 0) {
								a[y][x] = a[y][x] * 2;
								a[y][x + i] = 0;
								i = 999;//防止多次运算，
								x = x + 1;//防止多次运算，
							}
						}
						else {
							if (a[y][x + 1] == 0 && a[y][x + 2] == 0) {
								a[y][x] = a[y][x] * 2;
								a[y][x + i] = 0;
								i = 999;//防止多次运算，
								x = x + 1;//防止多次运算，
							}
						}
					}
				}
			}
		}
	}
	for (k = 0; k < 3; k++) {
		for (y = 0; y <= 3; y++) {
			for (x = 0; x <= 3; x++) {
				if (a[y][x] == 0 && a[y][x + 1] != 0 && x + 1 <= 3) {
					a[y][x] = a[y][x + 1];
					a[y][x + 1] = 0;
				}
			}
		}
	}
	xtox(a);
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏步骤（下）   void down(int (*a)[4])
.					作用：计算向下运行的结果，并重新排序
.					输入值：1.需要计算的4*4的数组
.					类型：void
.					返回值：无。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
void down(int(*a)[4]) {
	ytoy(a);
	xtoy(a);
	int x = 0, y = 0;
	int m = 0, n = 0;
	int i = 0, j = 0, k = 0;
	//out(a, 1);
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			if (a[y][x] != 0) {
				for (i = 1; i <= 3 - x; i++) {
					if (a[y][x] == a[y][x + i]) {
						if (i == 1) {
							a[y][x] = a[y][x] * 2;
							a[y][x + i] = 0;
							i = 999;//防止多次运算，
							x = x + 1;//防止多次运算，
						}
						else if (i == 2) {
							if (a[y][x + 1] == 0) {
								a[y][x] = a[y][x] * 2;
								a[y][x + i] = 0;
								i = 999;//防止多次运算，
								x = x + 1;//防止多次运算，
							}
						}
						else {
							if (a[y][x + 1] == 0 && a[y][x + 2] == 0) {
								a[y][x] = a[y][x] * 2;
								a[y][x + i] = 0;
								i = 999;//防止多次运算，
								x = x + 1;//防止多次运算，
							}
						}
					}
				}
			}
		}
	}
	for (k = 0; k < 3; k++) {
		for (y = 0; y <= 3; y++) {
			for (x = 0; x <= 3; x++) {
				if (a[y][x] == 0 && a[y][x + 1] != 0 && x + 1 <= 3) {
					a[y][x] = a[y][x + 1];
					a[y][x + 1] = 0;
				}
			}
		}
	}
	xtoy(a);
	ytoy(a);
}